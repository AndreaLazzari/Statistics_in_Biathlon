axis.title.y = element_text(size=12)) +
scale_fill_manual(values= c('Haecki Lena ' = 'firebrick',
'Brorsson Mona ' = 'navy')) +
scale_x_discrete(limits=seq(-40,50,10), labels=seq(-40,50,10))
plot
names_ordered <- names(named_percentages[rev(order_perc)])
plot <- ggplot() + theme_bw() +
geom_density(aes(efficiency_list[[names_ordered[6]]], y=..density..,
color= names_ordered[6]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list[[names_ordered[7]]], y=..density..,
color =  names_ordered[7])
, alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list[[names_ordered[9]]], y=..density..,
color= names_ordered[9]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list[[names_ordered[11]]], y=..density..,
color= names_ordered[11]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list[[names_ordered[12]]], y=..density..,
color= names_ordered[12]),
alpha=0.5, lwd=1) +
labs(color ='Athlete',  x='Effciency', y='PDF',
title='Athletes with related efficiency distributions - Men') +
theme(plot.title = element_text(size=15),
legend.text = element_text(size=10),
legend.title = element_text(size=12),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
plot
names_ordered <- names(named_percentages[rev(order_perc)])
plot <- ggplot() + theme_bw() +
geom_density(aes(efficiency_list[[names_ordered[6]]], y=..density..,
color= names_ordered[6]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list[[names_ordered[7]]], y=..density..,
color =  names_ordered[7])
, alpha=0.5, lwd=1) +
labs(color ='Athlete',  x='Effciency', y='PDF',
title='Athletes with related efficiency distributions - Top10 - Men') +
theme(plot.title = element_text(size=15),
legend.text = element_text(size=10),
legend.title = element_text(size=12),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
plot
names_ordered_w <- names(named_percentages_w[rev(order_perc_w)])
plot <- ggplot() + theme_bw() +
geom_density(aes(efficiency_list_w[[names_ordered_w[33]]], y=..density..,
color =  names_ordered_w[33])
, alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list_w[[names_ordered_w[4]]], y=..density..,
color= names_ordered_w[4]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list_w[[names_ordered_w[45]]], y=..density..,
color= names_ordered_w[45]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list_w[[names_ordered_w[18]]], y=..density..,
color= names_ordered_w[18]),
alpha=0.5, lwd=1) +
geom_density(aes(efficiency_list_w[[names_ordered_w[12]]], y=..density..,
color= names_ordered_w[12]),
alpha=0.5, lwd=1) +
labs(color ='Athlete',  x='Effciency', y='PDF',
title='Athletes with related efficiency distributions - Women') +
theme(plot.title = element_text(size=15),
legend.text = element_text(size=10),
legend.title = element_text(size=12),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
plot
# Analytical part
# Computing the total attempts
top_names_tot_att10 <- sum(efficiency_df$`Attempts top 10`)
top_names_tot_att10_w <- sum(efficiency_df_w$`Attempts top 10`)
# Computing the total hits
top_names_tot_hit10 <- sum(efficiency_df$Hits_top_ten)
top_names_tot_hit10_w <- sum(efficiency_df_w$Hits_top_ten)
# Computing the total attempts outside the top 10
top_names_tot_att_no10 <- sum(efficiency_df$`Attempts no top 10`)
top_names_tot_att_no10_w <- sum(efficiency_df_w$`Attempts no top 10`)
# Computing the total hits outside the top 10
top_names_tot_hit_no10 <- sum(efficiency_df$Hits_no_top_ten)
top_names_tot_hit_no10_w <- sum(efficiency_df_w$Hits_no_top_ten)
# Computing the desired mode for teh prior
mode_men <- (top_names_tot_hit10 + top_names_tot_hit_no10)/
(top_names_tot_att10 + top_names_tot_att_no10)
mode_women <- (top_names_tot_hit10_w + top_names_tot_hit_no10_w)/
(top_names_tot_att10_w + top_names_tot_att_no10_w)
# Computing the desired standard deviation for the prior
std_men <- sd(hit_miss$Probabilities)
std_women <- sd(hit_miss_w$Probabilities)
# Computing the alpha prior
alpha_prior_men <- unlist(map2(.x= mode_men, .y=std_men^2, .f=root_func))
alpha_prior_women <- unlist(map2(.x= mode_women, .y=std_women^2, .f=root_func))
# Computing the beta prior
beta_prior_men <- beta(mode = mode_men, alpha = alpha_prior_men)
beta_prior_women <- beta(mode = mode_women, alpha = alpha_prior_women)
# Computing the alpha posterior
alpha_post_men_10 <- alpha_prior_men + top_names_tot_hit10
alpha_post_women_10 <- alpha_prior_women + top_names_tot_hit10_w
# Computing the alpha posterior outside the top 10
alpha_post_men_no10 <- alpha_prior_men + top_names_tot_hit_no10
alpha_post_women_no10 <- alpha_prior_women + top_names_tot_hit_no10_w
# Computing the beta posterior
beta_post_men_10 <- beta_prior_men + top_names_tot_att10 - top_names_tot_hit10
beta_post_women_10 <- beta_prior_women + top_names_tot_att10_w - top_names_tot_hit10_w
# Computing the beta posterior outside the top 10
beta_post_men_no10 <- beta_prior_men + top_names_tot_att_no10 - top_names_tot_hit_no10
beta_post_women_no10 <- beta_prior_women + top_names_tot_att_no10_w - top_names_tot_hit_no10_w
# Mean of the beta distribution posterior
mean_10_men <- alpha_post_men_10/(alpha_post_men_10+beta_post_men_10)
mean_10_women <- alpha_post_women_10/(alpha_post_women_10+beta_post_women_10)
# Variance of the beta distribution posterior
var_10_men <- (alpha_post_men_10*beta_post_men_10)/( (alpha_post_men_10 + beta_post_men_10)^2*
(alpha_post_men_10 + beta_post_men_10 + 1))
var_10_women <- (alpha_post_women_10*beta_post_women_10)/( (alpha_post_women_10 + beta_post_women_10)^2*
(alpha_post_women_10 + beta_post_women_10 + 1))
# Variance of the beta distribution posterior outside the top 10
var_no10_men <- (alpha_post_men_no10*beta_post_men_no10)/( (alpha_post_men_no10 + beta_post_men_no10)^2*
(alpha_post_men_no10 + beta_post_men_no10 + 1))
var_no10_women <- (alpha_post_women_no10*beta_post_women_no10)/
( (alpha_post_women_no10 + beta_post_women_no10)^2*
(alpha_post_women_no10 + beta_post_women_no10 + 1))
# Defining the Jags arrays
n_samples <- 2000
jags_men_10 <- 100*(rbeta(n = n_samples, shape1 = alpha_post_men_no10, shape2 = beta_post_men_no10) -
rbeta(n = n_samples, shape1 = alpha_post_men_10, shape2 = beta_post_men_10))/
rbeta(n = n_samples, shape1 = alpha_post_men_no10, shape2 = beta_post_men_no10)
jags_women_10 <- 100*(rbeta(n = n_samples, shape1 = alpha_post_women_no10, shape2 = beta_post_women_no10) -
rbeta(n = n_samples, shape1 = alpha_post_women_10, shape2 = beta_post_women_10))/
rbeta(n = n_samples, shape1 = alpha_post_women_no10, shape2 = beta_post_women_no10)
jags_total <- jags_men_10 - jags_women_10
# Defining the Jags model
data <- list(X = jags_total, n = n_samples)
model <- jags.model(file = 'normal.bug', n.chains = 4, data = data)
update(model, 1000)
chain <- coda.samples(model = model, c('mean', 'precision'),  n.iter=10000)
print(summary(chain))
# Flattening the Jags chains
mean_jags <- c(unname(chain[[1]])[,1], unname(chain[[2]])[,1], unname(chain[[3]])[,1], unname(chain[[4]])[,1])
precision_jags <- c(unname(chain[[1]])[,2],
unname(chain[[2]])[,2], unname(chain[[3]])[,2], unname(chain[[4]])[,2])
# Plot of the mean parameter
plot <- ggplot() + theme_bw() +
geom_histogram(aes(mean_jags, y=..density..),
fill='darkorange2', alpha=0.9, color='white',
bins = bins_fd(mean_jags))+
labs(x='Mean', y='PDF',
title='Posterior Distribution for the Mean of the Normal') +
theme(plot.title = element_text(size=10),
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))
results_plot <- ggplot_build(plot)$data[[1]]
y_max_idx <- which.max(ggplot_build(plot)$data[[1]]$y)
mean_max <- (ggplot_build(plot)$data[[1]]$xmax[y_max_idx] + ggplot_build(plot)$data[[1]]$xmin[y_max_idx])/2
plot <- plot + geom_vline(aes(xintercept=mean_max),  linetype='dashed')+
annotate('text', x= mean_max + 0.035, y=14.7, label=sprintf('Max Mean = %s',round(mean_max,3)), size=2.5)
plot
# Plot of the precision paramters
plot <- ggplot() + theme_bw() +
geom_histogram(aes(precision_jags, y=..density..),
fill='forestgreen', alpha=0.9, color='white',
bins = bins_fd(mean_jags))+
labs(x='Precision', y='PDF',
title='Posterior Distribution for the Precision of the Normal') +
theme(plot.title = element_text(size=10),
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))
results_plot <- ggplot_build(plot)$data[[1]]
y_max_idx <- which.max(ggplot_build(plot)$data[[1]]$y)
precision_max <- (ggplot_build(plot)$data[[1]]$xmax[y_max_idx] +
ggplot_build(plot)$data[[1]]$xmin[y_max_idx])/2
plot <- plot + geom_vline(aes(xintercept=precision_max), linetype='dashed')+
annotate('text', x=precision_max + 0.035, y=18.8, label=sprintf('Max Precision = %s',round(precision_max,3)), size=2.5)
plot
# Standard deviation given by the posterior
std_max <- sqrt(1/precision_max)
std_max
# Normal given our retrieved mean and standard deviation
x_axis <- seq(-5, 5, 0.001)
plot <- ggplot() + theme_bw()+
geom_line(aes(x=x_axis, y=dnorm(x = x_axis, mean = mean_max, sd = std_max)), color = 'midnightblue' , lwd=0.8) +
geom_vline(xintercept = mean_max, color='chocolate1' ,lwd=0.8, linetype='dashed')+
annotate('text', x=mean_max + 2.35, y=0.27, label=sprintf('Max Mean = %s',round(mean_max,3)), size=2.5)+
labs(x='Efficiency', y='PDF',
title='Retrieved Normal Distribution for the Efficiency',
subtitle = 'Difference between Male and Female athletes') +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=8),
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))
plot
# Visual representation of the chains
plot(chain)
# Selecting the years were we have shooting data
years_shooting <-years[3:length(years)]
# Importing the shooting data for women
df_shooting_women <- data.frame()
for (i in seq_along(years_shooting)){
for(j in seq_along(locations[[years_shooting[i]]])){
files <- list.files(locations_path_women[[years_shooting[i]]],
pattern=sprintf('shooting.%s',locations[[years_shooting[i]]][j]),full.names = TRUE )
# Importing the data frame
for (file in files){
# Updating the race_id that will act as our primary key of the data set
race_id <- race_id + 1
list_id_women[[file]] <- race_id
df_res <- read.csv(file = file, sep = '\t')
# Raising a flag if the Rank column has not allowable columns
if(length(df_res$Rank[df_res$Rank %!in% allowables]) !=0){cat('wooow problem, in', file)}
# Updating the count of bibs > 120
res_over_women <- res_over_women + length(df_res$Rank[destring(df_res$Rank) > 120]
[! is.na(df_res$Rank[destring(df_res$Rank) > 120])])
# Checking for possible inconsistencies in the data set
if('Rank' %!in% colnames(df_res)){
cat(paste('There is a mistake in', file))
}
# Adding the isolated.pursuit column to the non-pursuit races in order to have the same
# columns to perform the rbind operation
# Adding the column specifying the year of the race
df_res$year <- rep(years[i], nrow(df_res))
# Adding the column specifying the venue of the race
df_res$location <- rep(locations[[years[i]]][j], nrow(df_res))
# Adding the column specifying the type of the race
if (grepl(pattern = 'pursuit', x =file, fixed=TRUE)){
df_res$race_type <- rep('Pursuit', nrow(df_res))
}
else if (grepl(pattern = 'individual', x =file, fixed=TRUE)){
df_res$race_type <- rep('Individual', nrow(df_res))
}
else if (grepl(pattern = 'mass_start', x =file, fixed=TRUE)){
df_res$race_type <- rep('Mass start', nrow(df_res))
}
else if (grepl(pattern = 'sprint', x =file, fixed=TRUE)){
df_res$race_type <- rep('Sprint', nrow(df_res))
df_res$Shooting.3 <- rep(0, nrow(df_res))
df_res$Shooting.4 <- rep(0, nrow(df_res))
df_res$Lane.2 <- rep(0, nrow(df_res))
df_res$Lane.3 <- rep(0, nrow(df_res))
df_res$Time.2 <- rep(0, nrow(df_res))
df_res$Time.3 <- rep(0, nrow(df_res))
}
else{
cat(paste('There is a mistake in',file,
'no race type specified'))
}
# Filling the list as we did for the men, popping out the disqualified is due to the
# Glaryzina affair
# Adding the column with the id of the race
df_res$ID <-rep( list_id_women[[paste(df_res$race_type[1], years_shooting[i],
locations[[years_shooting[i]]][j],
df_res$Given.Name[df_res$Rank %!in% c('DSQ')][1],
df_res$Given.Name[df_res$Rank %!in% c('DSQ')][2])]], nrow(df_res))
# Updating the final data frame
df_shooting_women <- rbind(df_shooting_women, df_res)
}
}
}
head(df_shooting_women)
# Importing the shooting data for women
df_shooting_men <- data.frame()
for (i in seq_along(years_shooting)){
for(j in seq_along(locations[[years_shooting[i]]])){
files <- list.files(locations_path_men[[years_shooting[i]]],
pattern=sprintf('shooting.%s',locations[[years_shooting[i]]][j]),full.names = TRUE )
# Importing the data frame
for (file in files){
# Updating the race_id that will act as our primary key of the data set
race_id <- race_id + 1
list_id_men[[file]] <- race_id
df_res <- read.csv(file = file, sep = '\t')
# Raising a flag if the Rank column has not allowable columns
if(length(df_res$Rank[df_res$Rank %!in% allowables]) !=0){cat('wooow problem, in', file)}
# Updating the count of bibs > 120
res_over_men <- res_over_men + length(df_res$Rank[destring(df_res$Rank) > 120]
[! is.na(df_res$Rank[destring(df_res$Rank) > 120])])
# Checking for possible inconsistencies in the data set
if('Rank' %!in% colnames(df_res)){
cat(paste('There is a mistake in', file))
}
# Adding the isolated.pursuit column to the non-pursuit races in order to have the same
# columns to perform the rbind operation
# Adding the column specifying the year of the race
df_res$year <- rep(years[i], nrow(df_res))
# Adding the column specifying the venue of the race
df_res$location <- rep(locations[[years[i]]][j], nrow(df_res))
# Adding the column specifying the type of the race
if (grepl(pattern = 'pursuit', x =file, fixed=TRUE)){
df_res$race_type <- rep('Pursuit', nrow(df_res))
}
else if (grepl(pattern = 'individual', x =file, fixed=TRUE)){
df_res$race_type <- rep('Individual', nrow(df_res))
}
else if (grepl(pattern = 'mass_start', x =file, fixed=TRUE)){
df_res$race_type <- rep('Mass start', nrow(df_res))
}
else if (grepl(pattern = 'sprint', x =file, fixed=TRUE)){
df_res$race_type <- rep('Sprint', nrow(df_res))
df_res$Shooting.3 <- rep(0, nrow(df_res))
df_res$Shooting.4 <- rep(0, nrow(df_res))
df_res$Lane.2 <- rep(0, nrow(df_res))
df_res$Lane.3 <- rep(0, nrow(df_res))
df_res$Time.2 <- rep(0, nrow(df_res))
df_res$Time.3 <- rep(0, nrow(df_res))
}
else{
cat(paste('There is a mistake in',file,
'no race type specified'))
}
# Filling the list as we did for the men, popping out the disqualified is due to the
# Glaryzina affair
# Adding the column with the id of the race
df_res$ID <-rep( list_id_men[[paste(df_res$race_type[1], years_shooting[i],
locations[[years_shooting[i]]][j],
df_res$Given.Name[df_res$Rank %!in% c('DSQ')][1],
df_res$Given.Name[df_res$Rank %!in% c('DSQ')][2])]], nrow(df_res))
# Updating the final data frame
df_shooting_men <- rbind(df_shooting_men, df_res)
}
}
}
# Restricting to individual competition
shooting_ind_men <- df_shooting_men[df_shooting_men$race_type == 'Individual',]
shooting_ind_women <- df_shooting_women[df_shooting_women$race_type == 'Individual',]
# The function to extract the outcome of the last shot
last_shot <- function(x){
string <- unlist(strsplit((x),""))
shots <- string[seq(length(string)-4, length(string))]
if (5 %in% as.numeric(shots)){
return('Hit')
}
else{return('Miss')}
}
# Applying the last shot function
shooting_ind_men$last_shot <- sapply(X = shooting_ind_men$Shooting.4, FUN = last_shot)
shooting_ind_women$last_shot <- sapply(X = shooting_ind_women$Shooting.4, FUN = last_shot)
# The function to extract the outcome the first 19 shots
hits_19 <- function(shooting1, shooting2, shooting3, shooting4){
string_1 <- unlist(strsplit((shooting1),""))
string_2 <- unlist(strsplit((shooting2),""))
string_3 <- unlist(strsplit((shooting3),""))
string_4 <- unlist(strsplit((shooting4),""))
shots_1 <- string_1[seq(length(string_1)-4, length(string_1))]
shots_2 <- string_2[seq(length(string_2)-4, length(string_2))]
shots_3 <- string_3[seq(length(string_3)-4, length(string_3))]
shots_4 <- string_4[seq(length(string_4)-4, length(string_4))]
shots_4 <- shots_4[shots_4 != 5]
shots_1 <- shots_1[shots_1 != 0]
shots_2 <- shots_2[shots_2 != 0]
shots_3 <- shots_3[shots_3 != 0]
shots_4 <- shots_4[shots_4 != 0]
return(length(as.numeric(shots_1)) +
length(as.numeric(shots_2)) +
length(as.numeric(shots_3)) +
length(as.numeric(shots_4)))
}
# Defining the lists that the pmap function takes in input
list_men_19 <- list(shooting1 = shooting_ind_men$Shooting.1,
shooting2 = shooting_ind_men$Shooting.2,
shooting3 = shooting_ind_men$Shooting.3,
shooting4 = shooting_ind_men$Shooting.4)
list_women_19 <- list(shooting1 = shooting_ind_women$Shooting.1,
shooting2 = shooting_ind_women$Shooting.2,
shooting3 = shooting_ind_women$Shooting.3,
shooting4 = shooting_ind_women$Shooting.4)
# Calling the pmap function to retrieve the outpu of the first 19 shots
shooting_ind_men$shots_19 <- unlist(pmap(.l = list_men_19, .f = hits_19))
shooting_ind_women$shots_19 <- unlist(pmap(.l = list_women_19, .f = hits_19))
# Restricting the analysis to perfect shots through the first 19 attempts
under_pressure_women <- shooting_ind_women[shooting_ind_women$shots_19==19,]
under_pressure_men <- shooting_ind_men[shooting_ind_men$shots_19==19,]
head(under_pressure_men)
# Doing the same thing of the individuals for the remaining 4 range races
shoothing_pursuit_men <- df_shooting_men[df_shooting_men$race_type == 'Pursuit',]
shoothing_pursuit_women <- df_shooting_women[df_shooting_women$race_type == 'Pursuit',]
shoothing_pursuit_men$last_shot <- sapply(X = shoothing_pursuit_men$Shooting.4, FUN = last_shot)
shoothing_pursuit_women$last_shot <- sapply(X = shoothing_pursuit_women$Shooting.4, FUN = last_shot)
list_men_19_p <- list(shooting1 = shoothing_pursuit_men$Shooting.1,
shooting2 = shoothing_pursuit_men$Shooting.2,
shooting3 = shoothing_pursuit_men$Shooting.3,
shooting4 = shoothing_pursuit_men$Shooting.4)
list_women_19_p <- list(shooting1 = shoothing_pursuit_women$Shooting.1,
shooting2 = shoothing_pursuit_women$Shooting.2,
shooting3 = shoothing_pursuit_women$Shooting.3,
shooting4 = shoothing_pursuit_women$Shooting.4)
shoothing_pursuit_men$shots_19 <- unlist(pmap(.l = list_men_19_p, .f = hits_19))
shoothing_pursuit_women$shots_19 <- unlist(pmap(.l = list_women_19_p, .f = hits_19))
shoothing_pursuit_women <- shoothing_pursuit_women[shoothing_pursuit_women$shots_19==19,]
shoothing_pursuit_men <- shoothing_pursuit_men[shoothing_pursuit_men$shots_19==19,]
shoothing_mass_start_men <- df_shooting_men[df_shooting_men$race_type == 'Mass start',]
shoothing_mass_start_women <- df_shooting_women[df_shooting_women$race_type == 'Mass start',]
shoothing_mass_start_men$last_shot <- sapply(X = shoothing_mass_start_men$Shooting.4, FUN = last_shot)
shoothing_mass_start_women$last_shot <- sapply(X = shoothing_mass_start_women$Shooting.4,
FUN = last_shot)
list_men_19_m <- list(shooting1 = shoothing_mass_start_men$Shooting.1,
shooting2 = shoothing_mass_start_men$Shooting.2,
shooting3 = shoothing_mass_start_men$Shooting.3,
shooting4 = shoothing_mass_start_men$Shooting.4)
list_women_19_m <- list(shooting1 = shoothing_mass_start_women$Shooting.1,
shooting2 = shoothing_mass_start_women$Shooting.2,
shooting3 = shoothing_mass_start_women$Shooting.3,
shooting4 = shoothing_mass_start_women$Shooting.4)
shoothing_mass_start_men$shots_19 <- unlist(pmap(.l = list_men_19_m, .f = hits_19))
shoothing_mass_start_women$shots_19 <- unlist(pmap(.l = list_women_19_m, .f = hits_19))
shoothing_mass_start_women <- shoothing_mass_start_women[shoothing_mass_start_women$shots_19==19,]
shoothing_mass_start_men <- shoothing_mass_start_men[shoothing_mass_start_men$shots_19==19,]
df_pressure_m <- rbind(shoothing_pursuit_men, shoothing_mass_start_men)
df_pressure_w <- rbind(shoothing_pursuit_women, shoothing_mass_start_women)
# The hits and the misses of the 20-th target for individuals and then for pursuits and mass starts
y_ind_m <- length(under_pressure_men$last_shot[under_pressure_men$last_shot=='Hit'])
y_ind_w <- length(under_pressure_women$last_shot[under_pressure_women$last_shot=='Hit'])
n_ind_m <- nrow(under_pressure_men)
n_ind_w <- nrow(under_pressure_women)
y_oth_m <- length(df_pressure_m$last_shot[df_pressure_m$last_shot=='Hit'])
y_oth_w <- length(df_pressure_w$last_shot[df_pressure_w$last_shot=='Hit'])
n_oth_m <- nrow(df_pressure_m)
n_oth_w <- nrow(df_pressure_w)
# The posterior parameters for individuals
alpha_post_ind_m <- alpha_prior_men + y_ind_m
alpha_post_ind_w <- alpha_prior_women + y_ind_m
beta_post_ind_m <- alpha_prior_men + n_ind_m - y_ind_m
beta_post_ind_w <- alpha_prior_women + n_ind_w - y_ind_w
# Probability of hitting the 20-th shot in residuals and mass starts
threshold_m <- y_oth_m/n_oth_m
threshold_w <- y_oth_w/n_oth_w
# Hypothesis testing for men
x_axis <- seq(0, 1, 0.001)
x_zoom_m <- seq(0.79, 0.88, 0.01)
x_rib_m <- seq(threshold_m,1,0.01)
y_area_m <- dbeta(x=x_rib_m, shape1 = alpha_post_ind_m, shape2 = beta_post_ind_m)
x_rib_m_zoom <- seq(threshold_m,0.85,0.01)
y_area_m_zoom <- dbeta(x=x_rib_m_zoom, shape1 = alpha_post_ind_m, shape2 = beta_post_ind_m)
plot <- ggplot() + theme_bw() +
geom_line(aes(x=x_axis, y=dbeta(x = x_axis, shape1 = alpha_post_ind_m,
shape2 = beta_post_ind_m)), color='steelblue4', lwd=0.78) +
geom_vline(aes(xintercept=threshold_m), color='darkorange2', lwd=0.8)+
annotate('text', x=threshold_m + 0.1, y=7, label='  --> Null Hyp H0', size=2.5)+
labs(x='Probability of hitting the target', y='Posterior PDF',
title='Posterior Distribution Men',
subtitle = 'Bayesian Hypothesis Testing') +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=8),
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))+
geom_ribbon(aes(x=x_rib_m,ymin=0,ymax=y_area_m), alpha=1, fill ='black')
pl_m_zoom <- ggplot()+ theme_bw()+
geom_line(aes(x_zoom_m, dbeta(x_zoom_m, shape1 = alpha_post_ind_m,                                      shape2 = beta_post_ind_m)), color='steelblue4', size=0.78)+
geom_vline(aes(xintercept=threshold_m), color='darkorange2', lwd=0.8)+
geom_ribbon(aes(x=x_rib_m_zoom,ymin=0,ymax=y_area_m_zoom), alpha=0.7, fill ='black')+  labs(x='Probability', y='Posterior')+
theme(axis.text.x = element_text(size=5),
axis.text.y = element_text(size=5),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))
plot + annotation_custom(ggplotGrob(pl_m_zoom), xmin = 0, xmax = 0.5, ymin = 2.5, ymax = 8)
# Integrating the null hypothesis for men
int_func_m <- function(x){
return(dbeta(x = x, shape1 = alpha_post_ind_m,
shape2 = beta_post_ind_m))
}
integrate(f = int_func_m, lower = threshold_m, upper=1)$value
# Integrating the null hypothesis for women
x_axis <- seq(0, 1, 0.001)
x_zoom_w <- seq(0.80, 0.85, 0.01)
x_rib_w <- seq(threshold_w,1,0.01)
y_area_w <- dbeta(x=x_rib_w, shape1 = alpha_post_ind_w, shape2 = beta_post_ind_w)
x_rib_w_zoom <- seq(threshold_w,0.85,0.01)
y_area_w_zoom <- dbeta(x=x_rib_w_zoom, shape1 = alpha_post_ind_w, shape2 = beta_post_ind_w)
plot <- ggplot() + theme_bw() +
geom_line(aes(x=x_axis, y=dbeta(x = x_axis, shape1 = alpha_post_ind_w,
shape2 = beta_post_ind_w)), color='deeppink3', lwd=0.78) +
geom_vline(aes(xintercept=threshold_w), color='mediumblue', lwd=0.8)+
annotate('text', x=threshold_w + 0.1, y=7, label='  --> Null Hyp H0', size=2.5)+
labs(x='Probability of hitting the target', y='Posterior PDF',
title='Posterior Distribution - Women',
subtitle = 'Bayesian Hypothesis Testing') +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=8),
axis.text.x = element_text(size=6),
axis.text.y = element_text(size=6),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))+
geom_ribbon(aes(x=x_rib_w,ymin=0,ymax=y_area_w), alpha=1, fill ='black')
pl_w_zoom <- ggplot()+ theme_bw()+
geom_line(aes(x_zoom_w, dbeta(x_zoom_w, shape1 = alpha_post_ind_w,                                      shape2 = beta_post_ind_w)), color='deeppink3', size=0.78)+
geom_vline(aes(xintercept=threshold_w), color='mediumblue', lwd=0.8)+
geom_ribbon(aes(x=x_rib_w_zoom,ymin=0,ymax=y_area_w_zoom), alpha=0.7, fill ='black')+
labs(x='Probability', y='Posterior')+
theme(axis.text.x = element_text(size=5),
axis.text.y = element_text(size=5),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8))
plot + annotation_custom(ggplotGrob(pl_w_zoom), xmin = 0, xmax = 0.5, ymin = 2.5, ymax = 8)
int_func_w <- function(x){
return(dbeta(x = x, shape1 = alpha_post_ind_w,
shape2 = beta_post_ind_w))
}
integrate(f = int_func_w, lower = threshold_w, upper=1)$value
